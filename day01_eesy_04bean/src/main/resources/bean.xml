<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--把对象的创建交给spring来管理-->
    <!--spring对bean的管理
        1、创建bean的三种方式
        2、bean对象的作用范围
        3、bean对象的生命周期
    -->

    <!--创建Bean的三种方式-->
    <!--第一种方式：使用默认构造函数创建
        在spring的配置文件中使用bean标签，配以id和class属性之后，且没有其他属性和标签时。
        采用的就是默认构造函数创建bean对象，此时如果类中没有默认构造函数，则对象无法创建。
     -->
    <!--bean的作用范围调整
        bean标签的scope属性：
            作用：用于指定bean的作用范围
            取值：
                singleton:单例的（默认值）
                prototype:多例的
                session:作用于web应用的请求范围
                global-session:作用域集群环境的会话范围（全局会话范围），当不是集群环境时，它就是session-->

    <bean id="accountServiceOne" class="com.zjw.service.impl.AccountServiceOneImpl" />

    <!--第二种方式：使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）-->
    <bean id="instanceFactory" class="com.zjw.factory.InstanceFactory"/>
    <bean id="accountServiceTwo" factory-bean="instanceFactory" factory-method="getAccountService" />

     <!--第三种方式：使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring）-->
    <bean id="accountServiceThree" class="com.zjw.factory.StaticFactory" factory-method="getAccountService" />

    <!--bean的生命周期
        单例对象
            出生：当容器创建时对象出生
            活着：只要容器还在，对象一直活着
            死亡：容器销毁，对象给你消亡
            总结：单例对象的生命周期和容器相同
        多例对象
            出生：当我们使用对象时spring框架为我们创建
            活着：对象只要是在使用过程中就一直活着
            死亡：当对象长时间不用，且没有别的对象引用时，由Java的垃圾回收器回收
    -->
    <!--
        init-method:对象创建后执行的方法
        destroy-method:对象销毁时执行的方法
            单例对象，容器关闭后执行
            多例模式，java虚拟机决定
        scope:单例还是多例对象
            singleton:默认，单例
            prototype:多例
    -->
    <bean id="accountService" class="com.zjw.service.impl.AccountServiceImpl"
          init-method="init" destroy-method="destroy" />

</beans>